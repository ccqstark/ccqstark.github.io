<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ribbon on ccq&#39;s blog</title>
    <link>https://ccqstark.github.io/tags/ribbon/</link>
    <description>Recent content in Ribbon on ccq&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Jul 2021 01:38:45 +0800</lastBuildDate><atom:link href="https://ccqstark.github.io/tags/ribbon/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ribbon负载均衡入门</title>
      <link>https://ccqstark.github.io/p/ribbon_startup/</link>
      <pubDate>Thu, 22 Jul 2021 01:38:45 +0800</pubDate>
      
      <guid>https://ccqstark.github.io/p/ribbon_startup/</guid>
      <description>客户端负载均衡 负载均衡顾名思义，是指通过软件或者硬件措施。它将来自客户端的请求按照某种策略平均的分配到集群的每一个节点上，保证这些节点的 CPU、内存等设备负载情况大致在一条水平线，避免由于局部节点负载过高产生宕机，再将这些处理压力传递到其他节点上产生系统性崩溃。
负载均衡按实现方式分类可区分为：服务端负载均衡与客户端负载均衡。
服务端负载均衡顾名思义，在架构中会提供专用的负载均衡器，由负载均衡器持有后端节点的信息，服务消费者发来的请求经由专用的负载均衡器分发给服务提供者，进而实现负载均衡的作用。目前常用的负载均衡器软硬件有：F5、Nginx、HaProxy 等。
客户端负载均衡是指，在架构中不再部署额外的负载均衡器，在每个服务消费者内部持有客户端负载均衡器，由内置的负载均衡策略决定向哪个服务提供者发起请求。通俗来讲，就是客户端在发送请求之前就通过某种策略选定了要请求的服务提供者，而不是让一个中间件来帮忙决定。
Ribbon Netfilx Ribbon 是 Netflix 公司开源的一个负载均衡组件，是属于客户端负载均衡器。目前Ribbon 已被 Spring Cloud 官方技术生态整合，运行时以 SDK 形式内嵌到每一个微服务实例中，为微服务间通信提供负载均衡与高可用支持。
 
过程如下：
 订单服务（order-service）与商品服务（goods-service）实例在启动时向 Nacos 注册； 订单服务向商品服务发起通信前，Ribbon 向 Nacos 查询商品服务的可用实例列表； Ribbon 根据设置的负载策略从商品服务可用实例列表中选择实例； 订单服务实例向商品服务实例发起请求，完成 RESTful 通信；  下面用一个实例来演示：
创建服务生产者 创建springboot项目模块，引入web和nacos客户端依赖
配置文件 spring:application:name:provider-service#应用/微服务名字cloud:nacos:discovery:server-addr:49.234.82.226:8848#nacos服务器地址username:nacos#用户名密码password:nacosserver:port:8081创建示例服务 @RestController public class ProviderController { @GetMapping(&amp;#34;/provider/msg&amp;#34;) public String sendMessage(){ return &amp;#34;This is the message from provider service one!&amp;#34;; } } 连续创建3个provider，注意配置文件中的应用/微服务名要一致，代表同一种服务，为了直接了当地识别服务来自不同的微服务示例，可以在返回的字符串中添加自己的标示。启动后可以在nacos中看到健康示例数为3:
 
创建服务消费者 引入web和nacos客户端依赖之外，还要引入ribbon
&amp;lt;!-- Ribbon --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
  </channel>
</rss>
