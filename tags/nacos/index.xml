<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nacos on ccq&#39;s blog</title>
    <link>https://ccqstark.github.io/tags/nacos/</link>
    <description>Recent content in Nacos on ccq&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Jul 2021 02:26:29 +0800</lastBuildDate><atom:link href="https://ccqstark.github.io/tags/nacos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dubbo&#43;Nacos实现RPC</title>
      <link>https://ccqstark.github.io/p/dubbo_nacos_rpc/</link>
      <pubDate>Thu, 22 Jul 2021 02:26:29 +0800</pubDate>
      
      <guid>https://ccqstark.github.io/p/dubbo_nacos_rpc/</guid>
      <description>RESTful 与 RPC 的区别 在微服务定义中提道，每个小服务运行在自己的进程中，并以轻量级的机制进行通信。这里并没有明确给出具体的通信方式，只是要求以轻量级的机制进行通信，虽然作者推荐使用 RESTful 作为首选方案，但微服务间通信本身还有另一个轻量级的选择：以 Dubbo 为代表的 RPC通信方式。
RPC 是远程过程调用（Remote Procedure Call）的缩写形式，RPC 与 RESTful 最大的不同是，RPC 采用客户端（Client) - 服务端（Server） 的架构方式实现跨进程通信，实现的通信协议也没有统一的标准，具体实现依托于研发厂商的设计。
 
目前开源市场上 RPC 框架有很多，例如 GoogleRPC、Alibaba Dubbo、Facebook Thrift，每一种产品都有自己的设计与实现方案。
那 RESTful 与 RPC 有什么区别呢？通过一个表格进行说明：
 
Apache Dubbo Dubbo 是阿里巴巴开源的高性能、轻量级的开源 Java 框架，目前被 Apache收录，官网是： http://dubbo.apache.org/
 
Dubbo 是典型的 RPC 框架的代表，通过客户端/服务端结构实现跨进程应用的高效二进制通信。
Apache Dubbo 提供了六大核心能力：
面向接口代理的高性能 RPC 调用；
智能容错和负载均衡；
服务自动注册和发现；
高度可扩展能力；
运行期流量调度；
可视化的服务治理与运维。
下图引用 Dubbo 的官方架构图，讲解 ApacheDubbo 的组成。
 
Dubbo 架构中，包含 5 种角色。</description>
    </item>
    
    <item>
      <title>Nacos配置中心入门</title>
      <link>https://ccqstark.github.io/p/nacos_config_startup/</link>
      <pubDate>Thu, 22 Jul 2021 01:48:33 +0800</pubDate>
      
      <guid>https://ccqstark.github.io/p/nacos_config_startup/</guid>
      <description>建立数据库 建立个用于存放配置的数据库名为nacos-config，nacos/conf下有一个nacos-mysql.sql，运行一下便可获得存放配置信息的表
 
配置数据源 修改nacos/conf/application.properties
### If use MySQL as datasource: spring.datasource.platform=mysql ### Count of DB: db.num=1 ### Connect URL of DB: db.url.0=jdbc:mysql://xxxxxxx:3306/nacos_config?characterEncoding=utf8&amp;amp;connectTimeout=1000&amp;amp;socketTimeout=3000&amp;amp;autoReconnect=true&amp;amp;useUnicode=true&amp;amp;useSSL=false&amp;amp;serverTimezone=UTC db.user=root db.password=xxxxxxx 记得重启
应用接入配置中心 依赖
&amp;lt;!-- Spring Boot Web模块 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- Nacos注册中心starter --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-nacos-discovery&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- Nacos配置中心starter --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-nacos-config&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 配置文件，我们把原来的application.yml删除了，我们不再需要本地配置
然后创建文件bootstrap.yml，注意名字要一模一样
spring:application:name:order-service#微服务idprofiles:active:dev#环境名cloud:nacos:config:#Nacos配置中心配置file-extension:yml#文件扩展名server-addr:192.168.31.10:8848username:nacospassword:nacoslogging:#开启debug日志，仅为学习时使用level:root:debug定义一份配置文件是用微服务id-环境名.文件扩展名 三部分组合为有效的 data id，比如上面的就是order-service-dev.yml
然后去Nacos把原来的那些应用配置给存到云端
点击➕ 号新建配置
 
注意data id 就是上面说的微服务id-环境名.文件扩展名 ，然后选择yaml格式，把我们以前写在本地的配置文件写到下面的配置内容中
 
此时新建的配置信息其实就是用我们之前配置的MySQL存的，你会发现这些配置信息存在config-info表中了</description>
    </item>
    
    <item>
      <title>Nacos服务注册与发现入门</title>
      <link>https://ccqstark.github.io/p/nacos_startup/</link>
      <pubDate>Thu, 22 Jul 2021 01:30:53 +0800</pubDate>
      
      <guid>https://ccqstark.github.io/p/nacos_startup/</guid>
      <description>docker单点部署 clone项目 git clone https://github.com/nacos-group/nacos-docker.git cd nacos-docker 修改配置文件 如果单机主机内存较小，可以修改配置文件example/standalone-derby.yaml 修改JVM运行内存
在nacos的environment 那里添加- JVM_XMS=256m和 - JVM_XMX=256m
version: &amp;#34;2&amp;#34;services: nacos: image: nacos/nacos-server:latest container_name: nacos-standalone environment: - PREFER_HOST_MODE=hostname - MODE=standalone - JVM_XMS=256m - JVM_XMX=256m volumes: - ./standalone-logs/:/home/nacos/logs - ./init.d/custom.properties:/home/nacos/init.d/custom.properties ports: - &amp;#34;8848:8848&amp;#34; prometheus: container_name: prometheus image: prom/prometheus:latest volumes: - ./prometheus/prometheus-standalone.yaml:/etc/prometheus/prometheus.yml ports: - &amp;#34;9090:9090&amp;#34; depends_on: - nacos restart: on-failure grafana: container_name: grafana image: grafana/grafana:latest ports: - 3000:3000 restart: on-failuredocker-compose启动容器 最后加个-d后台运行
docker-compose -f example/standalone-derby.yaml up -d 访问 地址：http://[ip地址]:8848/nacos/</description>
    </item>
    
  </channel>
</rss>
