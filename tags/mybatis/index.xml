<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MyBatis on ccq&#39;s blog</title>
    <link>https://ccqstark.github.io/tags/mybatis/</link>
    <description>Recent content in MyBatis on ccq&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Aug 2021 16:07:15 +0800</lastBuildDate><atom:link href="https://ccqstark.github.io/tags/mybatis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis分布式缓存实现</title>
      <link>https://ccqstark.github.io/p/redis_mybatis_cache/</link>
      <pubDate>Wed, 25 Aug 2021 16:07:15 +0800</pubDate>
      
      <guid>https://ccqstark.github.io/p/redis_mybatis_cache/</guid>
      <description>缓存的分类 本地缓存(local cache)：存在应用服务器内存中的数据称为本地缓存
分布式缓存(dustribute cache)：存储在当前应用服务器之外的数据称为分布式缓存
这里顺带提及集群和分布式的区别
集群(cluster)：将同一种服务的多个节点放在一起共同对系统提供服务，称为集群
分布式(distribute system)：有多个不同服务集群功能对系统提供服务，这个系统称之为分布式系统
所以两者虽然都是多个服务器节点，区别就在多个节点中，集群侧重的是同一种服务，而分布式侧重的是不同的服务，而且分布式还是建立在集群的基础之上的。
缓存发挥的作用  
由图中可以看出，缓存是作为存储层和客户端之间的中间层，当客户端的请求过来时，首先请求缓存中的内容，如果查到（hit）则直接返回，不再去查找存储层；如果没有（miss），则去存储层中查找并将结果写入缓存（write cache）再返回，以便之后相同的请求可以去缓存中获取。
之所以加入缓存层是因为存储层一般是需要读写磁盘的，而缓存层在内存中，两者的读写速度完全不是一个量级，内存快的多。而大部分应用的请求都有一个特点——读多写少，所以将总是需要查到的数据放在缓存层中可以大大提高应用的响应速度，减少存储层的压力。
一般Web应用中，存储层就是我们用的关系型数据库，MySQL、Oracle、SQLServer等，而缓存层分类上面已经提到，常用的有Redis，Memcached等。
MyBatis开启二级缓存 MyBatis一级缓存中，其最大的共享范围就是一个SqlSession内部，如果多个SqlSession之间需要共享缓存，则需要使用到二级缓存。
开启方法：
在业务的mapper.xml文件中添加
&amp;lt;cache/&amp;gt; 二级缓存开启后，同一个namespace下的所有操作语句，都影响着同一个Cache，即二级缓存被多个SqlSession共享，是一个全局的变量。
当开启缓存后，数据的查询执行的流程就是 二级缓存 -&amp;gt; 一级缓存 -&amp;gt; 数据库。
 
这样开启的是本地二级缓存，这样有个缺点就是应用重新启动后，JVM重新分配内存，这样的话之前的缓存就都没了，所以我们得用分布式缓存来解决。
使用Redis作为Mybatis的二级缓存 MyBatis的缓存实现类默认是PerpetualCache，它继承类Cache接口，除此之外还有其他实现类。
原理就是维护一个HashMap，将查询的SQL以及Mapper的namespace作为Key，然后查询的结果作为Value，通过键值对的方式来实现缓存查询过的sql语句的结果，所以要用redis替换也还是十分合适的。
Cache接口 public interface Cache { String getId(); void putObject(Object var1, Object var2); Object getObject(Object var1); Object removeObject(Object var1); void clear(); int getSize(); ReadWriteLock getReadWriteLock(); } 解析
getId ：这个方法其实是获取了执行的sql对应的namespace，可以用来组成缓存的key
putObject ：此方法就是用来将数据放入缓存的
getObject ：用以根据key获取缓存的值
removeObject ：删除某一缓存项目，MyBatis暂未实现与启用此方法，所以暂时无用
clear ：每次执行update/delete/insert语句都会调用此方法进行清除原有的缓存</description>
    </item>
    
  </channel>
</rss>
